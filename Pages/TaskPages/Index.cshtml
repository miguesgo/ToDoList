@page
@model ToDoList.Pages.TaskPages.IndexModel

<div class="task-banner">
    <img src="https://images.unsplash.com/photo-1528164344705-47542687000d?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb&w=4800" alt="Banner" />
</div>

<div class="container p-3 ToDo-form">
    <div class="row pt-4">
        <div class="col-6">
            <h2>Notes</h2>
            <h6><i class="bi bi-clock"></i> &nbsp; Creado &nbsp; @DateTime.Today</h6>
        </div>
        <div class="col-6 text-end">
            <a asp-page="create" class="ToDo-btn-primary">
                <i class="bi bi-plus-lg"></i> &nbsp; Create a new Task
            </a>
        </div>

        <div>
            <br /><br />
        </div>

        <div class="text-start">
            <h6 class="ToDo-dropdown-text">
                Sort by
                <select id="sort" onchange="sortTasks()" class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <option value="name" class="text-start">Name</option>
                    <option value="date" class="text-start">Due Date</option>
                    <option value="status" class="text-start">Status</option>
                </select>
                &nbsp;
                <a class="btn btn-success" onclick="downloadFile()">
                    <i class="bi bi-card-text"></i> &nbsp; Plain Text
                </a>
                <a class="btn btn-danger" onclick="downloadPdf()">
                    <i class="bi bi-filetype-pdf"></i> &nbsp; PDF
                </a>
            </h6>
        </div>
    </div>

    <div id="taskList">
        @await Html.PartialAsync("_SortByPartial", Model.ToDoTasks)
    </div>
</div>

<script>

    function sortTasks() {
        var sortValue = document.getElementById("sort").value;

        $.get("/TaskPages/Index?SortOrder=" + sortValue, function (data) {
            console.log("Response received:", data); // ✅ Should be the TaskPages Index
            $("#taskList").html(data);
        });
    }

    function downloadFile() {
        var sortValue = document.getElementById("sort").value;
        fetch("/TaskPages/Index?handler=DownloadTasks&SortOrder=" + sortValue, { method: 'GET' })
            .then(response => response.blob()) // Convert response to binary file data
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const _a = document.createElement("a");
                _a.href = url;
                _a.download = "To-Do-List.txt"; // Set the file name
                document.body.appendChild(_a);
                _a.click();
                window.URL.revokeObjectURL(url); // Cleanup
            })
            .catch(error => console.error("Error downloading file:", error));
    }

    function downloadPdf() {
        var sortValue = document.getElementById("sort").value;
        fetch("/TaskPages/Index?handler=DownloadPdf&SortOrder=" + sortValue, { method: 'GET' })
            .then(response => response.blob()) // Convert response to binary file data
            .then(blob => {
                let url = window.URL.createObjectURL(blob);
                let a = document.createElement("a");
                a.href = url;
                a.download = "To-Do-List.pdf";
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
            })
            .catch(error => console.error("Error downloading PDF file:", error));
    }
</script>